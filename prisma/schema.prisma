// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserModel {
  id                       String               @id @default(uuid())
  name                     String
  email                    String               @unique
  password                 String
  createdAt                DateTime             @default(now())
  isEmailVerified          Boolean              @default(false)
  emailVerificationToken   String?              @unique
  emailVerificationExpires DateTime?
  RefreshToken             RefreshToken[]
  ResetPassword            ResetPasswordModel[]
  ownedProducts            Product[]
}

model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @unique
  user      UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime
}

model ResetPasswordModel {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @unique
  user      UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  images      Image[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  saleItems   SaleItem[]
  taxes       TaxOnProduct[]
  updatedAt   DateTime       @updatedAt
  ownerId     String
  owner       UserModel      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
}

model TaxOnProduct {
  id        String  @id @default(uuid())
  name      String
  amount    Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
  MOBILE_MONEY
}

model Sale {
  id            String        @id @default(uuid())
  customerName  String
  totalAmount   Float
  taxAmount     Float
  discount      Float
  paymentMethod PaymentMethod // e.g., "cash", "credit card", etc.
  status        String // e.g., "completed", "pending", "refunded", etc.
  channel       String // e.g., "in-store", "online", etc.
  saleItems     SaleItem[]
  invoice       Invoice?
  notes         String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  discount  Float
  tax       Float
  createdAt DateTime @default(now())
}

model Invoice {
  id            String   @id @default(uuid())
  invoiceNumber String   @unique
  saleId        String   @unique
  sale          Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  amountDue     Float
  dueDate       DateTime
  isPaid        Boolean  @default(false)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
}
