// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model UserModel {
  id                       String               @id @default(uuid())
  name                     String
  email                    String               @unique
  role                     String               @default("admin")
  password                 String
  createdAt                DateTime             @default(now())
  isEmailVerified          Boolean              @default(false)
  emailVerificationToken   String?              @unique
  emailVerificationExpires DateTime?
  RefreshToken             RefreshToken[]
  ResetPassword            ResetPasswordModel[]
  ownedProducts            Product[]
  ownedSales               Sale[]
  ownedCategories          Category[]
  Invoice                  Invoice[]
  logoUrl                  String?              // Company logo URL
  companyAddress           String?              // Company address
  companyPhone             String?              // Company phone number
  defaultCurrencyCode      String?              // Default currency code (e.g., USD)
  defaultCurrencySymbol    String?              // Default currency symbol (e.g., $)
  defaultTaxRate           Float?               // Default tax rate (e.g., 0.075 for 7.5%)
  invoicePrefix            String?              // Invoice number prefix
  invoiceSuffix            String?              // Invoice number suffix
  invoiceSequenceStart     Int?                 @default(1) // Invoice sequence start
  invoiceSequenceNext      Int?                 @default(1) // Next invoice sequence number
  auditLogs                InvoiceAudit[]        // Audit logs for user actions
  receipts                 Receipt[]             // Receipts issued by this user
  receiptsAudit            ReceiptAudit[]        // Audit logs for user actions on receipts
  expenses                 Expense[]             // Expenses incurred by this user
  expenseCategories        ExpenseCategory[]     // Categories owned by this user
  stockAdjustments         StockAdjustment[]
  customerGroups           CustomerGroup[]
  customers                Customer[]
}



model RefreshToken {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @unique
  user      UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime
}

model ResetPasswordModel {
  id        String    @id @default(uuid())
  token     String    @unique
  userId    String    @unique
  user      UserModel @relation(fields: [userId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  expiresAt DateTime
}

model Image {
  id        String   @id @default(uuid())
  url       String
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Product {
  id          String         @id @default(uuid())
  name        String
  description String?
  price       Float
  stock       Int
  images      Image[]
  categoryId  String
  category    Category       @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  createdAt   DateTime       @default(now())
  saleItems   SaleItem[]
  taxes       TaxOnProduct[]
  updatedAt   DateTime       @updatedAt
  ownerId     String
  owner       UserModel      @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  cost        Float?    // Cost per unit (COGS)
  stockAdjustments StockAdjustment[]
}

model TaxOnProduct {
  id        String  @id @default(uuid())
  name      String
  amount    Float
  productId String
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
}

model Category {
  id          String    @id @default(uuid())
  name        String
  description String?
  products    Product[]
  ownerId     String
  owner       UserModel @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  CREDIT
  MOBILE_MONEY
}

model Sale {
  id            String        @id @default(uuid())
  totalAmount   Float
  taxAmount     Float
  discount      Float
  paymentMethod PaymentMethod // e.g., "cash", "credit card", etc.
  status        String // e.g., "completed", "pending", "refunded", etc.
  channel       String // e.g., "in-store", "online", etc.
  saleItems     SaleItem[]
  invoice       Invoice?
  notes         String?
  ownerId       String
  owner         UserModel     @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt
  customerId    String
  customer      Customer      @relation(fields: [customerId], references: [id], onDelete: Restrict)
}

model SaleItem {
  id        String   @id @default(uuid())
  saleId    String
  sale      Sale     @relation(fields: [saleId], references: [id], onDelete: Cascade)
  productId String
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  quantity  Int
  price     Float
  discount  Float
  tax       Float
  createdAt DateTime @default(now())
  cost      Float?   // Cost per unit at time of sale
}

enum InvoiceStatus {
  UNPAID
  PARTIAL
  PAID
}

model Invoice {
  id            String    @id @default(uuid())
  invoiceNumber String    @unique
  saleId        String    @unique
  sale          Sale      @relation(fields: [saleId], references: [id], onDelete: Cascade)
  amountDue     Float
  dueDate       DateTime
  ownerId       String
  owner         UserModel @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  isPaid        Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  status        InvoiceStatus @default(UNPAID)
  paidAmount    Float     @default(0)
  paidAt        DateTime?
  currencyCode  String    // e.g., "USD", "EUR", "NGN"
  currencySymbol String   // e.g., "$", "â‚¦"
  taxRate       Float     @default(0) // e.g., 0.075 for 7.5%
  taxAmount     Float     @default(0)
  auditLogs     InvoiceAudit[]        // Audit logs for this invoice
  receipt       Receipt?              // Receipt for this invoice
}

enum InvoiceAuditEventType {
  VIEWED
  DOWNLOADED
  EMAILED
}

model InvoiceAudit {
  id          String                @id @default(uuid())
  invoiceId   String
  invoice     Invoice              @relation(fields: [invoiceId], references: [id], onDelete: Cascade)
  userId      String?
  user        UserModel?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType   InvoiceAuditEventType
  eventDetails String?
  createdAt   DateTime             @default(now())
}

enum ReceiptAuditEventType {
  VIEWED
  DOWNLOADED
  EMAILED
}

model ReceiptAudit {
  id          String                @id @default(uuid())
  receiptId   String
  receipt     Receipt              @relation(fields: [receiptId], references: [id], onDelete: Cascade)
  userId      String?
  user        UserModel?           @relation(fields: [userId], references: [id], onDelete: SetNull)
  eventType   ReceiptAuditEventType
  eventDetails String?
  createdAt   DateTime             @default(now())
}

model Receipt {
  id             String   @id @default(uuid())
  receiptNumber  String   @unique
  issuedAt       DateTime @default(now())
  invoice        Invoice  @relation(fields: [invoiceId], references: [id])
  invoiceId      String   @unique
  issuedBy       UserModel? @relation(fields: [issuedById], references: [id])
  issuedById     String?
  emailed        Boolean  @default(false)
  emailedAt      DateTime?
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  auditLogs      ReceiptAudit[]       // Audit logs for this receipt
}

model Customer {
  id        String    @id @default(uuid())
  name      String
  email     String    @unique
  phone     String?
  address   String?
  sales     Sale[]
  memberships CustomerGroupMembership[]
  ownerId   String
  owner     UserModel @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model CustomerGroup {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       UserModel @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  memberships CustomerGroupMembership[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model CustomerGroupMembership {
  id          String    @id @default(uuid())
  customerId  String
  customer    Customer  @relation(fields: [customerId], references: [id], onDelete: Cascade)
  groupId     String
  group       CustomerGroup @relation(fields: [groupId], references: [id], onDelete: Cascade)
  createdAt   DateTime  @default(now())
}

model ExpenseCategory {
  id          String    @id @default(uuid())
  name        String
  description String?
  ownerId     String
  owner       UserModel @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  expenses    Expense[]
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt
}

model Expense {
  id              String          @id @default(uuid())
  ownerId         String
  owner           UserModel       @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  amount          Float
  categoryId      String
  category        ExpenseCategory @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  description     String?
  date            DateTime
  isRecurring     Boolean         @default(false)
  recurrenceType  RecurrenceType? // e.g., MONTHLY, YEARLY
  nextDueDate     DateTime?
  createdAt       DateTime        @default(now())
  updatedAt       DateTime        @updatedAt
}

enum RecurrenceType {
  DAILY
  WEEKLY
  MONTHLY
  YEARLY
}

model StockAdjustment {
  id             String     @id @default(uuid())
  productId      String
  product        Product    @relation(fields: [productId], references: [id], onDelete: Cascade)
  userId         String
  user           UserModel  @relation(fields: [userId], references: [id], onDelete: Cascade)
  quantityChange Int
  reason         String
  note           String?
  createdAt      DateTime   @default(now())
}
